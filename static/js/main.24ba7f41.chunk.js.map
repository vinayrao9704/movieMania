{"version":3,"sources":["Card.js","App.js","reportWebVitals.js","index.js"],"names":["CardStyles","styled","div","props","Image","Card","image","title","AppStyles","client","ApolloClient","uri","cache","InMemoryCache","App","useState","input","setInput","data","setData","runApi","e","a","preventDefault","query","gql","then","result","console","log","search","edges","className","type","placeholder","onChange","target","value","onClick","map","dataItem","node","__typename","images","posters","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yRAGMA,EAAaC,IAAOC,IAAV,onBAYY,SAACC,GAAD,OAAWA,EAAMC,SAwB9BC,I,IAAAA,EATf,SAAcF,GACZ,OACE,eAACH,EAAD,CAAYI,MAAOD,EAAMG,MAAzB,UACE,wBACA,+BAAOH,EAAMI,YC5BbC,EAAYP,IAAOC,IAAV,grBAqCTO,EAAS,IAAIC,IAAa,CAC9BC,IAAK,iCACLC,MAAO,IAAIC,MAmEEC,MAhEf,WACE,MAA0BC,qBAA1B,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KAMMC,EAAM,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sDACbD,EAAEE,iBACFd,EACGe,MAAM,CACLA,MAAOC,YAAF,obAEeT,KAiBrBU,MAAK,SAACC,GACLC,QAAQC,IAAIF,EAAOT,KAAKY,OAAOC,OAC/BZ,EAAQQ,EAAOT,KAAKY,OAAOC,UAzBlB,2CAAH,sDA4BZ,OACE,eAACvB,EAAD,CAAWwB,UAAU,MAArB,UACE,iCACE,uBACEC,KAAK,OACLC,YAAY,mBACZC,SAtCU,SAACd,GACjBJ,EAASI,EAAEe,OAAOC,UAuCd,wBAAQJ,KAAK,SAASK,QAASlB,EAA/B,uBAIF,qBAAKY,UAAU,QAAf,SACGd,EAAKqB,KAAI,SAACC,GAAD,gBACoB,SAA5BA,EAASC,KAAKC,WACZ,cAAC,EAAD,CACEpC,MAAK,UAAEkC,EAASC,KAAKE,cAAhB,iBAAE,EAAsBC,QAAQ,UAAhC,aAAE,EAAkCtC,MACzCC,MAAK,OAAEiC,QAAF,IAAEA,GAAF,UAAEA,EAAUC,YAAZ,aAAE,EAAgBlC,QAGzB,YC5FGsC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.24ba7f41.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst CardStyles = styled.div`\r\n  height: 400px;\r\n  width: 300px;\r\n  display: grid;\r\n  margin: 15px;\r\n  grid-template-rows: 1fr max-content;\r\n  background-color: #0099af;\r\n  border-radius: 10px;\r\n  div {\r\n    border-radius: 10px 10px 0px 0px;\r\n    width: 100%;\r\n    border: 2px solid black;\r\n    background-image: url(${(props) => props.Image});\r\n    background-size: cover;\r\n    background-position: center;\r\n    background-repeat: no-repeat;\r\n  }\r\n  span {\r\n    color: white;\r\n    font-family: \"Gill Sans\", \"Gill Sans MT\", Calibri, \"Trebuchet MS\",\r\n      sans-serif;\r\n    font-size: 18px;\r\n    padding: 10px;\r\n    text-overflow: ellipsis(\"...\");\r\n  }\r\n`;\r\n\r\nfunction Card(props) {\r\n  return (\r\n    <CardStyles Image={props.image}>\r\n      <div></div>\r\n      <span>{props.title}</span>\r\n    </CardStyles>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import \"./App.css\";\nimport { ApolloClient, InMemoryCache, gql } from \"@apollo/client\";\nimport { useState } from \"react\";\nimport styled from \"styled-components\";\nimport Card from \"./Card\";\n\nconst AppStyles = styled.div`\n  width: 70%;\n  margin: auto;\n  form {\n    width: 100%;\n    display: grid;\n    grid-template-columns: 1fr 100px;\n    * {\n      margin: 20px;\n    }\n    input {\n      padding: 15px;\n      font-size: 18px;\n      border-radius: 5px;\n      border: none;\n      outline: none;\n      background-color: #eee;\n    }\n    button {\n      border: none;\n      background-color: #eee;\n      outline: none;\n      font-size: 14px;\n      font-weight: bold;\n      color: gray;\n      border-radius: 5px;\n      margin-left: 5px;\n    }\n  }\n  .cards {\n    display: flex;\n    flex-wrap: wrap;\n    align-items: center;\n    justify-content: center;\n  }\n`;\n\nconst client = new ApolloClient({\n  uri: \"https://tmdb.apps.quintero.io/\",\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  const [input, setInput] = useState();\n  const [data, setData] = useState([]);\n\n  const takeInput = (e) => {\n    setInput(e.target.value);\n  };\n\n  const runApi = async (e) => {\n    e.preventDefault();\n    client\n      .query({\n        query: gql`\n          query {\n            search(term: \"${input}\") {\n              edges {\n                node {\n                  ... on Movie {\n                    title\n                    images {\n                      posters {\n                        image(size: W780)\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        `,\n      })\n      .then((result) => {\n        console.log(result.data.search.edges);\n        setData(result.data.search.edges);\n      });\n  };\n  return (\n    <AppStyles className=\"App\">\n      <form>\n        <input\n          type=\"text\"\n          placeholder=\"Enter movie name\"\n          onChange={takeInput}\n        />\n        <button type=\"submit\" onClick={runApi}>\n          Search\n        </button>\n      </form>\n      <div className=\"cards\">\n        {data.map((dataItem) =>\n          dataItem.node.__typename == \"Movie\" ? (\n            <Card\n              image={dataItem.node.images?.posters[0]?.image}\n              title={dataItem?.node?.title}\n            />\n          ) : (\n            \"\"\n          )\n        )}\n      </div>\n    </AppStyles>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}